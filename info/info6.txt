
- use connectorcreate to create relationship easily instead of search all db if it already exists
-- find where hashtag is food
-- if it does not exist then create it
 client.photo.create({
          data: {
            file,
            caption,
            hashtags: {
              connectOrCreate: [
                {
                  where: {
                    hashtag: "#food",
                  },
                  create: {
                    hashtag: "#food",
                  },
                },
              ],
            },
          },
        });

- fix computed fields by editing resolvers of the type

  Photo: {
    user: ({ userId }) => {
      return client.user.findUnique({ where: { id: userId } });
    },
    hashtags: ({ id }) =>
      client.hashtag.findMany({
        where: {
          photos: {
            some: {
              id,
            },
          },
        },
      }),
  },


- send argument in field
typedefs
  type Hashtag {
    id: Int!
    hashtag: String!
    photos(page: Int): [Photo]
    totalPhotos: Int!
    createdAt: String!
    updatedAt: String!
  }

- you can send arguments and context as well in the fields
resolvers
  Hashtag: {
    photos: ({ id }, { page }, { loggedInUser }) => {
      client.hashtag
        .findUnique({
          where: {
            id,
          },
        })
        .photos();
    },

- disconnect and create new connection (hashtags)

const photo = await client.photo.update({
    where: { id },
    data: {
    caption,
    hashtags: {
        disconnect: oldPhoto.hashtags,
        connectOrCreate: processHashtags(caption),
    },
    },
});

- install prisma autocomplete
npm i -D prettier-plugin-prisma


- select vs include
-- select filters and include tells prisma to load the field as well

- use info to fix protectedResolver to fix output
-- shows if operation is query or mutation

(ourResolver) => (root, args, context, info) => {
  const query = info.operation.operation === "query";
}



- upload photo to AWS
-- install 
npm i aws-sdk

-- create account

-- set region

-- go to iam and click user to add user

-- attach existing policies (use S3 full access)

-- create and generate key by clicking to the new user and "create access key"

-- go to S3

-- create a bucket

-- allow acls in bucket

- aws config

AWS.config.update({
  credentials: {
    accessKeyId: process.env.AWS_KEY,
    secretAccessKey: process.env.AWS_SECRET,
  },
});

-- upload code

export const uploadToS3 = async (file, userId) => {
  const { filename, createReadStream } = await file;
  const readStream = createReadStream();
  const objectName = `${userId}-${Date.now()}-${filename}`;
  const upload = await new AWS.S3()
    .upload({
      Bucket: "instaclone-uploads-hmchung",
      Key: objectName,
      ACL: "public-read",
      Body: readStream,
    })
    .promise();
  console.log(upload);
  return upload.Location;
};


